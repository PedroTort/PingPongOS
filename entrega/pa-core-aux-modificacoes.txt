// estrutura que define um tratador de sinal (deve ser global ou static)
struct sigaction action ;
// estrutura de inicialização to timer
struct itimerval timer ;

#define QUANTUM 20
#define TICK_TIME 1 // tempo entre dois ticks consecutivos

void interrupt_service_routine(int signum) {
    systemTime += TICK_TIME;
    if(taskExec->id == 1) return;

    taskExec->tempo_ja_executado += TICK_TIME;
    
    if(taskExec->quantum > 0) taskExec->quantum--;

    else task_yield(taskExec);
}

void interrupt_service_routine_init() {

  action.sa_handler = interrupt_service_routine ;
  sigemptyset (&action.sa_mask) ;
  action.sa_flags = 0 ;
  if (sigaction (SIGALRM, &action, 0) < 0)
  {
    perror ("Erro em sigaction: ") ;
    exit (1) ;
  }

  // ajusta valores do temporizador
  timer.it_value.tv_usec = 1;      // primeiro disparo, em micro-segundos
  timer.it_value.tv_sec  = 0 ;      // primeiro disparo, em segundos
  timer.it_interval.tv_usec = TICK_TIME *1000;   // disparos subsequentes, em micro-segundos
  timer.it_interval.tv_sec  =  0;   // disparos subsequentes, em segundos

  // arma o temporizador ITIMER_REAL (vide man setitimer)
  if (setitimer (ITIMER_REAL, &timer, 0) < 0)
  {
    perror ("Erro em setitimer: ") ;
    exit (1) ;
  }
}

void task_set_eet (task_t *task, int et) {
    if(task)
        task->tempo_estimado_execucao = et;
    else 
        taskExec->tempo_estimado_execucao = et;
}

int task_get_eet(task_t *task) {
    if(task)
        return task->tempo_estimado_execucao;
    else
        return taskExec->tempo_estimado_execucao;
}

int task_get_ret(task_t *task) {
    if(task)
        return task->tempo_estimado_execucao - task->tempo_ja_executado;
    else
        return taskExec->tempo_estimado_execucao - taskExec->tempo_ja_executado;
}


task_t * scheduler() {
    if ( readyQueue != NULL ) {

        task_t* readyQueueAux = readyQueue;
        task_t* minTimeLeftTask = readyQueueAux;

        readyQueueAux = readyQueueAux->next;
        int firstId = readyQueue->id;

        while(readyQueueAux->id != firstId){
            if(task_get_ret(readyQueueAux) < task_get_ret(minTimeLeftTask))
                minTimeLeftTask = readyQueueAux;
            readyQueueAux = readyQueueAux->next;
        }

        return minTimeLeftTask;
    }

    return NULL;
}

void after_ppos_init () {
    // put your customization here
    interrupt_service_routine_init();
    task_set_eet(taskMain, 99999);
#ifdef DEBUG
    printf("\ninit - AFTER");
#endif
}

void after_task_create (task_t *task) {
    // put your customization here
    task_set_eet(task, 99999);
    task->tempo_inicial = systemTime;
#ifdef DEBUG
    printf("\ntask_create - AFTER - [%d]", task->id);
#endif
}

void after_task_exit () {
    // put your customization here
    printf("Task %d exit: execution time %d ms, processor time %d ms, %d activations\n",taskExec->id,systime() - taskExec->tempo_inicial,taskExec->tempo_ja_executado,taskExec->ativacoes);
#ifdef DEBUG
    printf("\ntask_exit - AFTER- [%d]", taskExec->id);
#endif
}

void after_task_switch ( task_t *task ) {
    // put your customization here
    task->ativacoes += 1;
    if(task->quantum == 0){task->quantum  = QUANTUM;};
#ifdef DEBUG
    printf("\ntask_switch - AFTER - [%d -> %d]", taskExec->id, task->id);
#endif
}